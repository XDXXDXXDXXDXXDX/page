{"version":3,"sources":["components/TagSelectFromItem/index.js","hooks/useLogin.js","hooks/useCollection.js","components/AddNounButton/index.js","App.js","hooks/useNounList.js","helpers/getRandom.js","index.js"],"names":["Option","Select","tagSelectFrom","tagList","List","name","fields","add","remove","errors","map","field","Item","required","noStyle","style","width","tag","value","MinusCircleOutlined","onClick","key","type","icon","PlusOutlined","ErrorList","credentials","Realm","apiKey","app","useLogin","useState","realmApp","setRealmApp","id","logIn","then","catch","err","message","error","useCollection","cluster","db","collection","React","useMemo","currentUser","mongoClient","AddNounButton","Form","useForm","form","handleSubmit","noun","getFieldsValue","insertMany","e","Modal","confirm","title","content","fieldKey","restField","placeholder","block","onOk","onCancel","close","App","nounList","list","setList","useEffect","find","useNounList","console","log","tagMap","forEach","item","indexOf","push","className","spinning","length","onFinish","result","tags","num","values","Math","floor","random","info","join","TagSelectFromItem","htmlType","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f6a5ff88.chunk.js","sourcesContent":["import { Form, Button, Select } from \"antd\";\nimport { MinusCircleOutlined, PlusOutlined } from \"@ant-design/icons\";\n\nconst { Option } = Select;\nfunction tagSelectFrom({ tagList }) {\n  return (\n    <Form.List name=\"tags\">\n      {(fields, { add, remove }, { errors }) => (\n        <>\n          {fields.map((field) => (\n            <Form.Item required={false} key={field.key}>\n              <Form.Item {...field} noStyle>\n                <Select style={{ width: 100 }}>\n                  {tagList.map((tag) => (\n                    <Option value={tag} key={tag}>\n                      {tag}\n                    </Option>\n                  ))}\n                </Select>\n              </Form.Item>\n              <MinusCircleOutlined onClick={() => remove(field.name)} />\n            </Form.Item>\n          ))}\n          <Form.Item>\n            <Button\n              type=\"dashed\"\n              onClick={() => add()}\n              style={{ width: \"60%\" }}\n              icon={<PlusOutlined />}\n            >\n              Add field\n            </Button>\n            <Form.ErrorList errors={errors} />\n          </Form.Item>\n        </>\n      )}\n    </Form.List>\n  );\n}\n\nexport default tagSelectFrom;\n","import { useState } from \"react\";\nimport { message } from \"antd\";\nimport * as Realm from \"realm-web\";\n\nconst apiKey =\n  \"OAMMKo8c2HxLi1DzOgZHuuIGqIY2yypO9sj3eTY29mV0qGYwLiIxGNTecAs7uCDi\";\nconst credentials = Realm.Credentials.apiKey(apiKey);\nlet app = null;\nconst useLogin = () => {\n  const [realmApp, setRealmApp] = useState(app);\n  if (!realmApp) {\n    app = new Realm.App({ id: \"start-vwuib\" });\n    app\n      .logIn(credentials)\n      .then(() => {\n        setRealmApp(app);\n      })\n      .catch((err) => message.error(err));\n  }\n\n  return realmApp;\n};\n\nexport default useLogin;\n","import React from \"react\";\nimport useLogin from \"./useLogin\";\n\n/**\n * Returns a MongoDB Collection client object\n * @template DocType extends Realm.Services.MongoDB.Document\n * @param {Object} config - A description of the collection.\n * @param {string} [config.cluster] - The service name of the collection's linked cluster.\n * @param {string} config.db - The name of database that contains the collection.\n * @param {string} config.collection - The name of the collection.\n * @returns {Realm.Services.MongoDB.MongoDBCollection<DocType>} config.collection - The name of the collection.\n */\nexport default function useCollection({\n  cluster = \"mongodb-atlas\",\n  db,\n  collection,\n}) {\n  const realmApp = useLogin();\n  return React.useMemo(() => {\n    if (realmApp) {\n      const mdb = realmApp.currentUser.mongoClient(cluster);\n      return mdb.db(db).collection(collection);\n    } else {\n      return undefined;\n    }\n  }, [realmApp, cluster, db, collection]);\n}\n","import { Form, Button, Modal, Space, Input } from \"antd\";\nimport { MinusCircleOutlined, PlusOutlined } from \"@ant-design/icons\";\nimport useCollection from \"../../hooks/useCollection\";\n\nfunction AddNounButton() {\n  const [form] = Form.useForm();\n  const collection = useCollection({\n    db: \"XDX\",\n    collection: \"random\",\n  });\n  const handleSubmit = () => {\n    const { noun } = form.getFieldsValue();\n    collection.insertMany(noun);\n  };\n  const handleClick = (e) => {\n    Modal.confirm({\n      title: \"添加\",\n      content: (\n        <Form name=\"addNoun\" form={form}>\n          <Form.List name=\"noun\">\n            {(fields, { add, remove }) => (\n              <>\n                {fields.map(({ key, name, fieldKey, ...restField }) => (\n                  <Space key={key}>\n                    <Form.Item\n                      {...restField}\n                      name={[name, \"value\"]}\n                      fieldKey={[fieldKey, \"value\"]}\n                    >\n                      <Input placeholder=\"Value\" />\n                    </Form.Item>\n                    <Form.Item\n                      {...restField}\n                      name={[name, \"tag\"]}\n                      fieldKey={[fieldKey, \"last\"]}\n                    >\n                      <Input placeholder=\"Tag\" />\n                    </Form.Item>\n                    <MinusCircleOutlined onClick={() => remove(name)} />\n                  </Space>\n                ))}\n                <Form.Item>\n                  <Button\n                    type=\"dashed\"\n                    onClick={() => add()}\n                    block\n                    icon={<PlusOutlined />}\n                  >\n                    Add field\n                  </Button>\n                </Form.Item>\n              </>\n            )}\n          </Form.List>\n        </Form>\n      ),\n      onOk: handleSubmit,\n      onCancel: (close) => close(),\n    });\n  };\n\n  return (\n    <div>\n      <Button onClick={handleClick}>添加名词</Button>\n    </div>\n  );\n}\n\nexport default AddNounButton;\n","import \"./App.css\";\nimport \"antd/dist/antd.css\";\nimport { Form, Button, Spin, Modal } from \"antd\";\nimport TagSelectFromItem from \"./components/TagSelectFromItem\";\nimport AddNounButton from \"./components/AddNounButton\";\n\nimport useNounList from \"./hooks/useNounList\";\n\nimport getRandom from \"./helpers/getRandom\";\n\nfunction App() {\n  const nounList = useNounList();\n  console.log(nounList);\n  const tagList = [];\n  const tagMap = {};\n  nounList.forEach((item) => {\n    if (tagList.indexOf(item.tag) === -1) {\n      tagList.push(item.tag);\n      tagMap[item.tag] = [item.value];\n    } else {\n      tagMap[item.tag].push(item.value);\n    }\n  });\n\n  const onFinish = ({ tags }) => {\n    const result = tags.map((tag) => {\n      const values = tagMap[tag];\n      return values[getRandom(values.length)];\n    });\n    Modal.info({\n      title: \"结果\",\n      content: result.join(\" \"),\n    });\n    console.log(result);\n  };\n\n  return (\n    <div className=\"app\">\n      <AddNounButton />\n      <Spin spinning={!nounList.length}>\n        <Form onFinish={onFinish}>\n          <TagSelectFromItem tagList={tagList} />\n          <Form.Item>\n            <Button type=\"primary\" htmlType=\"submit\">\n              Submit\n            </Button>\n          </Form.Item>\n        </Form>\n      </Spin>\n    </div>\n  );\n}\n\nexport default App;\n","import { useEffect, useState } from \"react\";\nimport useCollection from \"./useCollection\";\n\nexport default function useNounList() {\n  const [list, setList] = useState([]);\n  const collection = useCollection({\n    db: \"XDX\",\n    collection: \"random\",\n  });\n  useEffect(() => {\n    if (collection) {\n      collection.find().then((list) => setList(list));\n    }\n  }, [collection]);\n  return list;\n}\n","export default function getRandom(num) {\n  return Math.floor(Math.random() * num);\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}